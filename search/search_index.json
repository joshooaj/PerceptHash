{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#compare-images-with-percepthash","title":"Compare images with PerceptHash","text":"<p>Using the PerceptHash module on Windows, linux, or macOS, you can generate \"perceptual hashes\" with the <code>Get-PerceptHash</code> command which is designed to look and feel similar to the <code>Get-FileHash</code> cmdlet.</p> <pre><code>$ProgressPreference = 'SilentlyContinue'\nInvoke-RestMethod http://localhost:8000/assets/images/photo3.jpg -outfile ./photo3.jpg\nGet-PerceptHash ./photo3.jpg\n\n&lt;# OUTPUT\n\nAlgorithm Hash             Path\n--------- ----             ----\n    dhash C0600030F8BD3D7C C:\\temp\\photo3.jpg\n\n#&gt;\n</code></pre>"},{"location":"#install","title":"Install","text":"<pre><code>Install-Module PerceptHash\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Use the <code>Get-PerceptHash</code> cmdlet with the path to an image file with a common extension like <code>.jpg</code>, or <code>.png</code>, and a <code>PerceptHash</code> object with the algorithm name, hash, and file path is returned.</p> <pre><code>Get-PerceptHash ./images/*.jpg\n</code></pre> <p>When you have two or more images, you can generate perceptual hashes for all of them, then use the <code>Compare-PerceptHash</code> cmdlet to calculate the binary hamming distance between two perceptual hashes.</p> <pre><code>$hash1 = Get-PerceptHash photo1.jpg\n$hash2 = Get-PerceptHash photo2.jpg\nCompare-PerceptHash $hash1 $hash2\n</code></pre>"},{"location":"#interpretation","title":"Interpretation","text":"<p>Each hash represents 64 segments of an image, each represented as a single bit. The 64bit hashes are compared using <code>Compare-PerceptHash</code>, and a number between 0 and 64 is returned. This number represents how many bits are different between the two hashes.</p> <p>A value of 10 or under is usually a good indication that the two images are similar. Values closer to zero are more similar. Likewise, a value greater than 10 indicates that the two images are probably dissimilar.</p> <p>This algorithm is far from perfect considering the hashes are created by distilling the source file down to a 9x8 grayscale image, however the algorithm works well when used to simply bring similar images to your attention.</p>"},{"location":"#the-algorithm","title":"The algorithm","text":"<p>I hear and use the word \"hash\" on a regular basis, and have used all kinds of cryptographic hashes over the years including md5, bcrypt, and the various sha's. But these are fundamentally different algorithms with almost polar opposite goals. The kind of hashs I was familar with were designed to produce wildly different results from two sets of data if even a single bit was different between them. The resulting hashes were either the same, indicating that the inputs were very likely the same (collisions happen, but they're hard to find), or they were different, indicating that the inputs were definitely different. There should be no way to measure how similar two inputs are based on their SHA hashes. If you could, the algorithm would be too weak to use for any kind of security or privacy on the web.</p> <p>In contrast, a perceptual hash like dHash will, by design, produce the same or similar hash when given two images that are nearly identical. And since each bit in the 64bit hash represents a part of the image, you can calculate the hamming distance between two hashes to determine how many of the 64bits in the two hashes are different. Fewer differences indicate a higher likelihood that the hashes are from the same or similar images.</p> <p>Here's a quick summary of the dHash algorithm:</p> <ol> <li>Reduce the size to 9x8 pixels. Don't worry about the original image size or aspect ratio.</li> <li>Convert to grayscale because we only care about the \"brightness\" of each pixel.</li> <li>Compare each pixel's brightness to the neighbor on the right. This is why the image is resized to 9x8 - we need 8 bits per row.</li> <li>Assign a bit value of \"1\" if the current pixel is brighter than the neighbor on the right.</li> </ol> <p>You will end up with one byte per row, and 8 rows, for a total of 64 bits. Convert the array of bytes to a hexadecimal string and you have your dHash.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#nearly-identical","title":"Nearly identical","text":"<p>These photos of my daughter at the river are nearly identical to the untrained eye, but the raw files are very different. In the following table you'll find a side-by-side comparison of what appears to be the same image, and their dHashes along with a SHA1. For fun, you'll also find the 9x8 grayscale versions from which the dHashes were derived.</p> <p>The hamming distance between the dHash values from these images is 2, which means two out of the 64 bits of the hash were different, so as you would expect, the hash comparison shows that the images have a strong visual similarity.</p> Photo 1 Photo 2 dHash: 83AD9B9CEC762888 dHash: 83A99B9CEC762898 SHA1: 80187EB0E86F2FCDE82E60D7CD53BB0B1B1FF686 SHA1: 5BC13493BB94536C3EAE794A924C1D9A00D207D6 <pre><code>$hash1 = Get-PerceptHash photo1.jpg\n$hash2 = Get-PerceptHash photo2.jpg\nCompare-PerceptHash $hash1 $hash2\n</code></pre>"},{"location":"#image-filter-applied","title":"Image filter applied","text":"<p>In this next example, the first image is the original and the second has been \"color enhanced\". We can see that the images are definitely different, but we can also see that they're most likely the same image with different colors. When we compare the dHashes, we get a difference of 6. Since that is still well under 10, we can be fairly confident that the images are similar.</p> Photo 3 Photo 4 dHash: 60606040587c5c7c dHash: 60606040d87c5d7c SHA1: BDE8B4AB0DC4E28D4DA72A982E4B99159E72EA9C SHA1: C624DC07813ABBC07E286665AF7A41941F19F9AF <pre><code>Get-PerceptHash photo3.jpg | Compare-PerceptHash -DifferenceHash 60606040d87c5d7c\n</code></pre>"},{"location":"#very-different-cats","title":"Very different cats","text":"<p>Okay in this last example, just to demonstrate that the algorithm doesn't consider all images similar, here are two very different cats because... internet. The dHash comparison returns a value of 24.</p> Photo 5 Photo 6 dHash: 9CDCF8CC6C37762E dHash: 9C8878D1ABC6EC7E SHA1: 51E2DFE65974C86740C314E7883D22C163D3EA1B SHA1: A58DBDAA875B5FC311BBB35A74748E68550CFC12 <pre><code>$hashes = Get-ChildItem *.jpg | Where-Object BaseName -match 'photo[56]'\nCompare-PerceptHash -ReferenceHash $hashes[0] -DifferenceHash $hashes[1]\n</code></pre>"},{"location":"commands/en-US/Compare-PerceptHash/","title":"Compare-PerceptHash","text":""},{"location":"commands/en-US/Compare-PerceptHash/#synopsis","title":"SYNOPSIS","text":"<p>Compares the provided perceptual hashes and returns the difference as an integer.</p>"},{"location":"commands/en-US/Compare-PerceptHash/#syntax","title":"SYNTAX","text":"<pre><code>Compare-PerceptHash [[-ReferenceHash] &lt;Object&gt;] [[-DifferenceHash] &lt;Object&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Compare-PerceptHash/#description","title":"DESCRIPTION","text":"<p>The <code>Compare-PerceptHash</code> cmdlet compares the provided perceptual hashes and returns the difference as an integer.</p>"},{"location":"commands/en-US/Compare-PerceptHash/#examples","title":"EXAMPLES","text":""},{"location":"commands/en-US/Compare-PerceptHash/#example-1","title":"Example 1","text":"<pre><code>$hash1 = Get-PerceptHash ./image1.jpg\n$hash2 = Get-PerceptHash ./image2.jpg\n\nComparePerceptHash -ReferenceHash $hash1 -DifferenceHash $hash2\n</code></pre> <p>Compares image1.jpg and image2.jpg returning the difference using the dHash algorithm.</p>"},{"location":"commands/en-US/Compare-PerceptHash/#example-2","title":"Example 2","text":"<pre><code>Get-PerceptHash ./image1.jpg | ComparePerceptHash -DifferenceHash '6964565642464933'\n</code></pre> <p>Compares image1.jpg with the plain dHash value <code>6964565642464933</code>.</p>"},{"location":"commands/en-US/Compare-PerceptHash/#parameters","title":"PARAMETERS","text":""},{"location":"commands/en-US/Compare-PerceptHash/#-differencehash","title":"-DifferenceHash","text":"<p>Specifies a perceptual hash to compare with the value of <code>ReferenceHash</code>.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Compare-PerceptHash/#-referencehash","title":"-ReferenceHash","text":"<p>Specifies a perceptual hash to be compared with.</p> <pre><code>Type: Object\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Compare-PerceptHash/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/en-US/Compare-PerceptHash/#inputs","title":"INPUTS","text":""},{"location":"commands/en-US/Compare-PerceptHash/#systemobject","title":"System.Object","text":""},{"location":"commands/en-US/Compare-PerceptHash/#outputs","title":"OUTPUTS","text":""},{"location":"commands/en-US/Compare-PerceptHash/#systemint32","title":"System.Int32","text":""},{"location":"commands/en-US/Compare-PerceptHash/#notes","title":"NOTES","text":""},{"location":"commands/en-US/Compare-PerceptHash/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/en-US/Get-PerceptHash/","title":"Get-PerceptHash","text":""},{"location":"commands/en-US/Get-PerceptHash/#synopsis","title":"SYNOPSIS","text":"<p>Gets a perceptual hash of the provided image(s).</p>"},{"location":"commands/en-US/Get-PerceptHash/#syntax","title":"SYNTAX","text":""},{"location":"commands/en-US/Get-PerceptHash/#path-default","title":"Path (Default)","text":"<pre><code>Get-PerceptHash [-Path] &lt;String[]&gt; [-Algorithm &lt;PerceptHashAlgorithm&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#literalpath","title":"LiteralPath","text":"<pre><code>Get-PerceptHash [-LiteralPath] &lt;String[]&gt; [-Algorithm &lt;PerceptHashAlgorithm&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#inputstream","title":"InputStream","text":"<pre><code>Get-PerceptHash [-InputStream] &lt;Stream&gt; [-Algorithm &lt;PerceptHashAlgorithm&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#description","title":"DESCRIPTION","text":"<p>The <code>Get-PerceptHash</code> cmdlet gets a perceptual hash of the provided image(s). In the current version only the dHash algorithm is available. Future versions may include additional algorithms.</p>"},{"location":"commands/en-US/Get-PerceptHash/#examples","title":"EXAMPLES","text":""},{"location":"commands/en-US/Get-PerceptHash/#example-1","title":"Example 1","text":"<pre><code>Get-PerceptHash -Path ./image.jpg\n</code></pre> <p>Gets the perceptual hash for <code>image.jpg</code> in the current directory using the dHash algorithm.</p>"},{"location":"commands/en-US/Get-PerceptHash/#example-2","title":"Example 2","text":"<pre><code>Get-PerceptHash -LiteralPath 'image[2].jpg'\n</code></pre> <p>Gets the perceptual hash for <code>image[2].jpg</code> in the current directory using the dHash algorithm. The square brackets in the file name require the use of the <code>LiteralPath</code> parameter instead of the default <code>Path</code> parameter.</p>"},{"location":"commands/en-US/Get-PerceptHash/#example-3","title":"Example 3","text":"<pre><code>$memoryStream = [io.memorystream]::new()\n$bytes = [io.file]::ReadAllBytes('image.jpg')\n$memoryStream.Write($bytes, 0, $bytes.Length)\n$memoryStream.Position = 0\n\nGet-PerceptHash -InputStream $memoryStream\n</code></pre> <p>In many cases there may not be a file on disk and the image is in a stream object. In that case you can use the <code>InputStream</code> parameter to generate a perceptual hash. The use of <code>IO.MemoryStream</code> here is only for demonstration purposes.</p>"},{"location":"commands/en-US/Get-PerceptHash/#parameters","title":"PARAMETERS","text":""},{"location":"commands/en-US/Get-PerceptHash/#-algorithm","title":"-Algorithm","text":"<p>Specifies the perceptual hash algorithm to use. At present, only dHash is supported.</p> <pre><code>Type: PerceptHashAlgorithm\nParameter Sets: (All)\nAliases:\nAccepted values: dhash\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#-inputstream","title":"-InputStream","text":"<p>Specifies a memory, file, or other stream object representing an image from disk or some other source.</p> <pre><code>Type: Stream\nParameter Sets: InputStream\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#-literalpath","title":"-LiteralPath","text":"<p>Specifies the exact file path for the image, or images to be hashed.</p> <pre><code>Type: String[]\nParameter Sets: LiteralPath\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#-path","title":"-Path","text":"<p>Specifies the path to one or more images to be hashed.</p> <pre><code>Type: String[]\nParameter Sets: Path\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-PerceptHash/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/en-US/Get-PerceptHash/#inputs","title":"INPUTS","text":""},{"location":"commands/en-US/Get-PerceptHash/#systemstring","title":"System.String[]","text":""},{"location":"commands/en-US/Get-PerceptHash/#outputs","title":"OUTPUTS","text":""},{"location":"commands/en-US/Get-PerceptHash/#systemstring_1","title":"System.String","text":""},{"location":"commands/en-US/Get-PerceptHash/#notes","title":"NOTES","text":""},{"location":"commands/en-US/Get-PerceptHash/#related-links","title":"RELATED LINKS","text":""},{"location":"en-US/about_PerceptHash.help/","title":"PerceptHash","text":""},{"location":"en-US/about_PerceptHash.help/#about_percepthash","title":"about_PerceptHash","text":"<pre><code>ABOUT TOPIC NOTE:\nThe first header of the about topic should be the topic name.\nThe second header contains the lookup name used by the help system.\n\nIE:\n# Some Help Topic Name\n## SomeHelpTopicFileName\n\nThis will be transformed into the text file\nas `about_SomeHelpTopicFileName`.\nDo not include file extensions.\nThe second header should have no spaces.\n</code></pre>"},{"location":"en-US/about_PerceptHash.help/#short-description","title":"SHORT DESCRIPTION","text":"<p>{{ Short Description Placeholder }}</p> <pre><code>ABOUT TOPIC NOTE:\nAbout topics can be no longer than 80 characters wide when rendered to text.\nAny topics greater than 80 characters will be automatically wrapped.\nThe generated about topic will be encoded UTF-8.\n</code></pre>"},{"location":"en-US/about_PerceptHash.help/#long-description","title":"LONG DESCRIPTION","text":"<p>{{ Long Description Placeholder }}</p>"},{"location":"en-US/about_PerceptHash.help/#optional-subtopics","title":"Optional Subtopics","text":"<p>{{ Optional Subtopic Placeholder }}</p>"},{"location":"en-US/about_PerceptHash.help/#examples","title":"EXAMPLES","text":"<p>{{ Code or descriptive examples of how to leverage the functions described. }}</p>"},{"location":"en-US/about_PerceptHash.help/#note","title":"NOTE","text":"<p>{{ Note Placeholder - Additional information that a user needs to know.}}</p>"},{"location":"en-US/about_PerceptHash.help/#troubleshooting-note","title":"TROUBLESHOOTING NOTE","text":"<p>{{ Troubleshooting Placeholder - Warns users of bugs}}</p> <p>{{ Explains behavior that is likely to change with fixes }}</p>"},{"location":"en-US/about_PerceptHash.help/#see-also","title":"SEE ALSO","text":"<p>{{ See also placeholder }}</p> <p>{{ You can also list related articles, blogs, and video URLs. }}</p>"},{"location":"en-US/about_PerceptHash.help/#keywords","title":"KEYWORDS","text":"<p>{{List alternate names or titles for this topic that readers might use.}}</p> <ul> <li>{{ Keyword Placeholder }}</li> <li>{{ Keyword Placeholder }}</li> <li>{{ Keyword Placeholder }}</li> <li>{{ Keyword Placeholder }}</li> </ul>"}]}